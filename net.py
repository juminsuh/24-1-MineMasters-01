# -*- coding: utf-8 -*-
"""net.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y8U5Jttp9SAB5T6tUQi4uOQyKd6gIwye
"""

class NeuralNet(nn.Module):

    def __init__(self, output):

        super(NeuralNet, self).__init__()

        self.drop_prob = 0.25

        self.conv1 = nn.Conv2d(1, 64, kernel_size = 3, stride = 1, padding = 1)
        self.batchnorm1 = nn.BatchNorm2d(64)
        self.conv2 = nn.Conv2d(64, 64, kernel_size = 3, stride = 1, padding = 1)
        self.batchnorm2 = nn.BatchNorm2d(64)
        self.conv3 = nn.Conv2d(64, 64, kernel_size = 3, stride = 1, padding = 1)
        self.batchnorm3 = nn.BatchNorm2d(64)
        self.dropout = nn.Dropout(p = self.drop_prob)
        self.fc1 = nn.Linear(64*9*9, 128)
        self.fc2 = nn.Linear(128, output)

    def forward(self, x):

        x = self.conv1(x)
        x = F.relu(self.batchnorm1(x))
        x = self.dropout(x)

        x = self.conv2(x)
        x = F.relu(self.batchnorm2(x))

        x = self.conv3(x)
        x = F.relu(self.batchnorm3(x))
        x = self.dropout(x)

        x = x.view(-1, 64*9*9)
        x = self.fc1(x)
        x = self.fc2(x)
        return x